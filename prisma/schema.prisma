// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ATIVO
  INATIVO
}

enum Cargos {
  PROPRIETARIO
  ADMINISTRADOR
  COLABORADOR
}

model Funcionario {
  id       String     @id @default(uuid())
  nome     String
  email    String     @unique
  telefone String
  cpf      String     @unique
  senha    String
  status   Status     @default(INATIVO)
  cargo    Cargos     @default(COLABORADOR)
  Carrinho Carrinho[]
}

model Clientes {
  id          String   @id @default(uuid())
  nome        String
  email       String   @unique
  telefone    String
  cpf         String   @unique
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt

  Enderecos Endereco[] // Um cliente pode ter vários endereços
  Carrinho  Carrinho[]
}

model Endereco {
  id          String   @id @default(uuid())
  rua         String
  numero      String
  bairro      String
  cidade      String
  estado      String
  cep         String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt

  clienteId String // Chave estrangeira para relacionar ao cliente
  Clientes  Clientes @relation(fields: [clienteId], references: [id]) // Relaciona com o cliente
}

model Carrinho {
  id            String   @id @default(uuid())
  clienteId     String
  funcionarioId String
  valorTotal    Float
  dateCreated   DateTime @default(now())
  dateUpdated   DateTime @updatedAt

  Clientes     Clientes       @relation(fields: [clienteId], references: [id])
  Funcionario  Funcionario    @relation(fields: [funcionarioId], references: [id])
  ItemCarrinho ItemCarrinho[]
}

model ItemCarrinho {
  id            String   @id @default(uuid())
  carrinhoId    String
  produtoId     String
  quantidade    Int
  precoUnitario Float
  dateCreated   DateTime @default(now())
  dateUpdated   DateTime @updatedAt

  Carrinho Carrinho @relation(fields: [carrinhoId], references: [id])
  Produtos Produtos @relation(fields: [produtoId], references: [id])
}

model Produtos {
  id          String   @id @default(uuid())
  nome        String
  descricao   String
  preco       Float
  quantidade  Int
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt

  ItemCarrinho ItemCarrinho[]
}
